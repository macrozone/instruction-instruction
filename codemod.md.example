# Codemod Instructions Template

**Source**: [Main instruction URL]  
**Purpose**: Detailed code transformation instructions

## Dry Run Support

This codemod file supports dry-run mode. All pattern matches and replacements will be shown without applying changes when requested.

## Overview

This file contains detailed codemod instructions that are too complex for the main instruction file. Use this format for multi-step transformations, complex pattern matching, or when multiple files need coordinated changes.

## Transformation Overview

Brief description of what these codemods accomplish.

## Prerequisites

- Ensure setup.md has been completed
- Git repository in clean state
- Backup your codebase (or rely on git for rollback)
- Run tests before applying changes

## Conditional Transformations

### If React components detected
**Detection**: Files containing `import React` or JSX syntax
**Action**: Apply React-specific transformations

### If TypeScript files detected
**Detection**: Files with `.ts` or `.tsx` extensions
**Action**: Apply type definition updates

## Transformations

### 1. Update Import Statements

**Files to target**: `src/**/*.{js,ts,jsx,tsx}`

**Find pattern**:
```javascript
import { oldFunction } from 'old-library';
```

**Replace with**:
```javascript
import { newFunction } from 'new-library';
```

**Additional context**: Look for usage of `oldFunction` and replace with `newFunction` in the same files.

### 2. Transform Component Structure

**Files to target**: `src/components/**/*.tsx`

**Find pattern**:
```tsx
const Component = (props) => {
  const { data } = useOldHook();
  return <div>{data}</div>;
};
```

**Replace with**:
```tsx
const Component = (props) => {
  const { data } = useNewHook();
  return <div>{data}</div>;
};
```

### 3. Update Configuration Objects

**Files to target**: `config/**/*.js`

**Find pattern**:
```javascript
module.exports = {
  oldConfig: true,
  settings: {
    legacy: 'value'
  }
};
```

**Replace with**:
```javascript
module.exports = {
  newConfig: true,
  settings: {
    modern: 'value'
  }
};
```

## Verification Steps

After applying codemods:

1. Run type checking: `npm run typecheck`
2. Run tests: `npm test`
3. Build project: `npm run build`
4. Manual verification: Check that [specific functionality] still works

## Rollback Instructions

To undo these changes:

1. Revert import statements: Replace `new-library` imports back to `old-library`
2. Revert hook usage: Change `useNewHook` back to `useOldHook`
3. Revert configuration: Restore old configuration structure
4. Run tests to verify rollback completed successfully

## Common Issues

- **Type errors**: If you see TypeScript errors, ensure new library types are installed
- **Runtime errors**: Check that new functions have the same signature as old ones
- **Build failures**: Verify all imports are correctly updated